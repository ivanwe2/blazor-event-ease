@page "/events"
@inject IEventService EventService

<h3>Events</h3>

<div class="event-form">
    <h4>Add New Event</h4>
    <EditForm Model="newEvent" OnValidSubmit="AddEvent">
        <DataAnnotationsValidator />

        <div>
            <label>Name:</label>
            <InputText @bind-Value="newEvent.Name" />
            <ValidationMessage For="@(() => newEvent.Name)" />
        </div>
        <div>
            <label>Date:</label>
            <InputDate @bind-Value="newEvent.Date" />
            <ValidationMessage For="@(() => newEvent.Date)" />
        </div>
        <div>
            <label>Location:</label>
            <InputText @bind-Value="newEvent.Location" />
            <ValidationMessage For="@(() => newEvent.Location)" />
        </div>
        <button type="submit">Add Event</button>
    </EditForm>
</div>

@if (AreEventsLoaded())
{
    <ul class="event-list">
        @foreach (var evt in events)
        {
            <li @key="evt.Id">
                <EventCard Event="evt" OnDelete="DeleteEvent" />
            </li>
        }
    </ul>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Event> events = new();
    private Event newEvent = new Event { Date = DateTime.Now };

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEventsAsync();
    }

    private bool AreEventsLoaded()
    {
        return events is not null && events.Count > 0;
    }

    private async Task AddEvent()
    {
        newEvent.Id = Guid.NewGuid();
        await EventService.SaveEventAsync(newEvent); 

        newEvent = new Event { Date = DateTime.Now };
        
        await InvokeAsync(StateHasChanged);
    }

    private void DeleteEvent(Guid eventId)
    {
        var eventToDelete = events.FirstOrDefault(e => e.Id == eventId);
        if (eventToDelete != null)
        {
            events.Remove(eventToDelete);
            EventService.DeleteEventAsync(eventId);
        }
    }
}